# @format

name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all history for git cliff

      - name: Setup Volta
        uses: volta-cli/action@v4

      - name: Install Dependancies
        run: |
          npm ci

      - name: Build
        run: |
          npm run build

      - name: Set Env
        id: version
        run: |
          TAG=${{ github.event.release.tag_name }}
          echo "::set-output name=VERSION::${TAG#v}"

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: './dist/module.json'
        env:
          version: ${{ steps.version.outputs.VERSION }}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      # Create a zip file with all files required by the module to add to the release
      - run: cd dist && zip -r ../module.zip .

      - name: Generate Changelog
        id: git-cliff
        uses: orhun/git-cliff-action@v1
        with:
          config: cliff.toml
          args: --current --date-order --strip all
        env:
          OUTPUT: CHANGES.md

      - name: Set the release body
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          echo "RELEASE_BODY<<EOF" >>$GITHUB_OUTPUT
          echo "$r" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Create a release for this specific version
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './dist/module.json, ./module.zip'
          tag: ${{ github.event.release.tag_name }}
          body: ${{ steps.release.outputs.RELEASE_BODY }}

      - name: Publish to Foundry Admin
        run: npx @ghost-fvtt/foundry-publish
        env:
          FVTT_MANIFEST_PATH: ./dist/module.json
          FVTT_MANIFEST_URL: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.json
          FVTT_CHANGELOG_URL: https://github.com/${{github.repository}}/releases/tag/${{github.event.release.tag_name}}
          FVTT_PACKAGE_ID: ${{ secrets.FVTT_PACKAGE_ID }}
          FVTT_USERNAME: ${{ secrets.FVTT_USERNAME }}
          FVTT_PASSWORD: ${{ secrets.FVTT_PASSWORD }}
          FVTT_DELETE_OBSOLETE_VERSIONS: false