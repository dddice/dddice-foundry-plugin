# @format

name: Release

on:
  workflow_dispatch:
    inputs:
      increment_version:
        description: 'Increment Version'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - none
      prerelease:
        description: 'Prerelease'
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      INCREMENT: ${{ github.event.inputs.increment_version }}
    steps:
      - name: Setup Volta
        uses: volta-cli/action@v4

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all history for git-cliff


      - name: Calculate Version Number
        id: version
        run: |
          TAG=$(git describe --tags --abbrev=0)
          VERSION=${TAG#v}
          echo "latest version: $VERSION"
          if [ "$INCREMENT" != "none" ]; then
            VERSION=$(npx --yes semver -i "${{ (github.event.inputs.prerelease == 'true') && 'pre' || '' }}$INCREMENT" --preid rc "$VERSION")
          fi
          echo "new version: $VERSION"
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Update Version
        run: |
          npm --no-git-tag-version --allow-same-version version ${{ steps.version.outputs.version }}
          MANIFEST=$(cat src/manifest.json | jq ".version |= \"${{ steps.version.outputs.version }}\"")
          echo "$MANIFEST" > src/manifest.json

      - name: Commit
        run: |
          git add .
          git config user.email "developers@dddice.com"
          git config user.name "dddice"
          git commit --allow-empty -m "release: ${{ steps.version.outputs.tag }}-${{ github.run_number }}" || echo 'ok'
          git push

      - name: Tag
        if: inputs.increment_version != 'none'
        run: |
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Tag (Force)
        if: inputs.increment_version == 'none'
        run: |
          git tag -f ${{ steps.version.outputs.tag }}
          git push -f origin ${{ steps.version.outputs.tag }}

      - name: Build Release
        run: |
          npm ci
          npm run build

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: './dist/module.json'
        env:
          version: ${{ steps.version.outputs.version }}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{steps.version.outputs.tag}}/module.zip

      # Create a zip file with all files required by the module to add to the release
      - run: cd dist && zip -r ../module.zip .

      - name: Generate Changelog
        id: git-cliff
        uses: orhun/git-cliff-action@v2
        with:
          config: cliff.toml
          args: --current --strip all
        env:
          OUTPUT: CHANGES.md

      - name: Set the release body
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          echo "RELEASE_BODY<<EOF" >>$GITHUB_OUTPUT
          echo "$r" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ steps.version.outputs.tag }}
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './dist/module.json, ./module.zip'
          tag: ${{ steps.version.outputs.tag }}
          body: ${{ steps.release.outputs.RELEASE_BODY }}
          prerelease: ${{ inputs.prerelease }}


      - name: Publish to Foundry Admin
        if: github.event.inputs.prerelease != 'true'
        run: npx @ghost-fvtt/foundry-publish
        env:
          FVTT_MANIFEST_PATH: ./dist/module.json
          FVTT_MANIFEST_URL: https://github.com/${{github.repository}}/releases/download/${{steps.version.outputs.tag}}/module.json
          FVTT_CHANGELOG_URL: https://github.com/${{github.repository}}/releases/tag/${{steps.version.outputs.tag}}
          FVTT_PACKAGE_ID: ${{ secrets.FVTT_PACKAGE_ID }}
          FVTT_USERNAME: ${{ secrets.FVTT_USERNAME }}
          FVTT_PASSWORD: ${{ secrets.FVTT_PASSWORD }}
          FVTT_DELETE_OBSOLETE_VERSIONS: false