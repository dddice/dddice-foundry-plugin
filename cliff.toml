# configuration file for git-cliff (0.7.0)

[changelog]
# changelog header
header = """
# Changelog
Features, fixes, and enhancements for dddice.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
## {{ version }}
_Released {{ timestamp | date(format="%Y-%m-%d") }}_
{% else %}\
## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
#### {{ group | upper_first }}
{% for commit in commits %}
- {{ commit.message | upper_first }}\
{% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespaces from the template
trim = false
# changelog footer
footer = """
Install from the module library or at 👇

Foundry VTT: https://foundryvtt.com/packages/dddice
Foundry Hub: https://www.foundryvtt-hub.com/package/dddice/
The Forge: https://forge-vtt.com/bazaar/package/dddice
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# regex for parsing and grouping commits
commit_parsers = [
    { message = "(infrastructure)", skip = true, scope="other" },
    { message = "(internal)", skip = true, scope="other" },
    { message = "(handbook)", skip = true, scope="other" },
    { message = "(deps)", skip = true, scope="other" },
    { message = "^feat", group = "<!-- 0 -->🎉 New Features", scope="other"},
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes", scope="other"},
    { message = "^perf", group = "<!-- 2 -->🚀 Performance", scope="other"},
    { message = "^doc", group = "<!-- 3 -->📝 Documentation", scope="other"},
    { message = "^style", group = "<!-- 4 -->🎨 Styling", scope="other"},
    # { message = "^refactor", group = "<!-- 5 -->⚠️ Refactor", scope="other"},
    { message = "^chore\\(release\\): prepare for", skip = true, scope="other"},
    { body = ".*security", group = "<!-- 6 -->🔐 Security", scope="other"},
    { message = "^chore", group = "<!-- 7 -->⚙️ Miscellaneous", scope="other"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# skip tags with -rc.# in them
skip_tags = "-rc.[0-9]*"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = true
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
